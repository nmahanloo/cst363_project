package com.csumb.cst363;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;


@Controller    
public class ControllerPrescriptionCreate {
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	/*
	 * Doctor requests blank form for new prescription.
	 */
	@GetMapping("/prescription/new")
	public String newPrescripton(Model model) {
		model.addAttribute("prescription", new Prescription());
		return "prescription_create";
	}
	
	/* 
	 * Process the new prescription form.
	 * 1.  Validate that Doctor SSN exists and matches Doctor Name.
	 * 2.  Validate that Patient SSN exists and matches Patient Name.
	 * 3.  Validate that Drug name exists.
	 * 4.  Insert new prescription.
	 * 5.  If error, return error message and the prescription form
	 * 6.  Otherwise, return the prescription with the rxid number that was generated by the database.
	 */
	@PostMapping("/prescription")
	public String newPrescription( Prescription p, Model model) {
		String ssn = "";
		if (p.getDoctor_ssn().length() != 9) {
			model.addAttribute("message", "Enter 9 digits of doctor social security number.");
			return "prescription_create";
		}
		else {
			ssn = p.getDoctor_ssn();
			try {
				int snnInt = Integer.parseInt(ssn);
			} catch (NumberFormatException nfe) {
				model.addAttribute("message", "Doctor SSN should be entered as numbers.");
				return "prescription_create";
			}
			if ((ssn.charAt(0) == '0') || (ssn.charAt(0) == '9')) {
				model.addAttribute("message", "Doctor SSN should not begin with 0 or 9.");
				return "prescription_create";
			}
			ssn = p.getDoctor_ssn().substring(3, 5);
			if (ssn.equals("00")) {
				model.addAttribute("message", "The two middle digits of doctor SSN cannot be 00.");
				return "prescription_create";
			}
			ssn = p.getDoctor_ssn().substring(5, 9);
			if (ssn.equals("0000")) {
				model.addAttribute("message", "The last four digits of doctor SSN cannot be 0000.");
				return "prescription_create";
			}
		}
		if (p.getDoctorFirstName().length() < 1) {
			model.addAttribute("message", "Enter doctor first name.");
			return "prescription_create";
		}
		if (p.getDoctorLastName().length() < 1) {
			model.addAttribute("message", "Enter doctor last name.");
			return "prescription_create";
		}
		if (p.getPatient_ssn().length() != 9) {
			model.addAttribute("message", "Enter 9 digits of patient social security number.");
			return "prescription_create";
		}
		else {
			ssn = p.getPatient_ssn();
			try {
				int snnInt = Integer.parseInt(ssn);
			} catch (NumberFormatException nfe) {
				model.addAttribute("message", "Patient SSN should be entered as numbers.");
				return "prescription_create";
			}
			if ((ssn.charAt(0) == '0') || (ssn.charAt(0) == '9')) {
				model.addAttribute("message", "Patient SSN should not begin with 0 or 9.");
				return "prescription_create";
			}
			ssn = p.getPatient_ssn().substring(3, 5);
			if (ssn.equals("00")) {
				model.addAttribute("message", "The two middle digits of patient SSN cannot be 00.");
				return "prescription_create";
			}
			ssn = p.getPatient_ssn().substring(5, 9);
			if (ssn.equals("0000")) {
				model.addAttribute("message", "The last four digits of patient SSN cannot be 0000.");
				return "prescription_create";
			}
		}
		if (p.getPatientFirstName().length() < 1) {
			model.addAttribute("message", "Enter patient first name.");
			return "prescription_create";
		}
		if (p.getPatientLastName().length() < 1) {
			model.addAttribute("message", "Enter patient last name.");
			return "prescription_create";
		}
		if (p.getDrugName().length() < 1) {
			model.addAttribute("message", "Enter drug name.");
			return "prescription_create";
		}
		if (p.getQuantity() < 1) {
			model.addAttribute("message", "Enter a quantity number greater than 0.");
			return "prescription_create";
		}
		Connection connection = null;
		try {
			connection = getConnection();
			String query = "SELECT PhysicianID FROM PHYSICIAN WHERE SSN = ? AND FirstName = ? AND LastName = ?";
			PreparedStatement ps = connection.prepareStatement(query);
			ps.setString(1, p.getDoctor_ssn());
			ps.setString(2, p.getDoctorFirstName());
			ps.setString(3, p.getDoctorLastName());
			ResultSet rs = ps.executeQuery();
			if (!rs.next()) {
				model.addAttribute("message", "This doctor not registered in the database yet.");
				return "prescription_create";
			}
			query = "SELECT PatientID FROM PATIENT WHERE SSN = ? AND FirstName = ? AND LastName = ?";
			ps = connection.prepareStatement(query);
			ps.setString(1, p.getPatient_ssn());
			ps.setString(2, p.getPatientFirstName());
			ps.setString(3, p.getPatientLastName());
			rs = ps.executeQuery();
			if (!rs.next()) {
				model.addAttribute("message", "This patient not registered in the database yet.");
				return "prescription_create";
			}
			query = "SELECT DISTINCT Drug_ID FROM DRUG WHERE Trade_Name = ? OR  Formula = ?";
			ps = connection.prepareStatement(query);
			ps.setString(1, p.getDrugName());
			ps.setString(2, p.getDrugName());
			rs = ps.executeQuery();
			if (!rs.next()) {
				model.addAttribute("message", "This drug not registered in the database yet.");
				return "prescription_create";
			}
			ps = connection.prepareStatement("insert into prescription(patientid, drug_id, physicianid, pharmacyid, drugname, quantity, rxprice, prescriptiondate, prescriptionfilldate) values " +
							"((select PatientID from PATIENT where SSN=?), (select Drug_ID from DRUG where Trade_Name = ? or Formula = ? limit 1), (select PhysicianID from PHYSICIAN where SSN = ?), (select PharmacyID from PHARMACY where Name = ?),?, ?, null, now(), null)",

					Statement.RETURN_GENERATED_KEYS);
			ps.setString(1, p.getPatient_ssn());
			ps.setString(2, p.getDrugName());
			ps.setString(3, p.getDrugName());
			ps.setString(4, p.getDoctor_ssn());
			ps.setString(5, p.getPharmacyName());
			ps.setString(6,p.getDrugName());
			ps.setInt(7, p.getQuantity());
//			ps.setDouble(8, Double.parseDouble(p.getCost()));
//			Date pDate = new SimpleDateFormat("MM/dd/yyyy").parse(p.getDateFilled());
//			ps.setDate(9, (java.sql.Date) pDate);
//			ps.setDate(10, (java.sql.Date) pDate);

			ps.execute();

			PreparedStatement ps2 = connection.prepareStatement("select last_insert_id()");
			rs = ps2.executeQuery();

			while (rs.next()){
				p.setRxid(rs.getString(1));
			}
//			String sql = "insert into prescription(patientid, drug_id, physicianid, pharmacyid, drugname, quantity, rxprice, prescriptiondate, prescriptionfilldate) values (?, ?, ?, ?, ?, ?, ?, ?, ?)";
//			PreparedStatement ps = connection.prepareStatement(sql);
//			Object prescription = model.getAttribute("drugName");
			int i = 90;
//			ps.setInt(1,  model.getAttribute("prescription"));
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}


		// set fake data for auto-generated prescription id.
//		p.setRxid("RX1980031234");
		
		model.addAttribute("message", "Prescription created.");
		model.addAttribute("prescription", p);
		return "prescription_show";
	}
	
	/*
	 * return JDBC Connection using jdbcTemplate in Spring Server
	 */

	private Connection getConnection() throws SQLException {
		Connection conn = jdbcTemplate.getDataSource().getConnection();
		return conn;
	}
	
}
